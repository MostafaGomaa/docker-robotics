#!/bin/bash

SCRIPT_PATH=$(dirname $(readlink -f ${BASH_SOURCE[0]}))
source $SCRIPT_PATH/setup.bash

COMPONENT=${1:-NOT SET}

echo "Running component $COMPONENT"

if [ -e /var/run/secrets/kubernetes.io/serviceaccount/token ]; then
	KUBERNETES="true"
	KUBERNETES_CACRT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
	KUBERNETES_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
fi

case $COMPONENT in
	gazebo)
		echo "Running gzserver"
		gzserver $GAZEBO_WORLD_PATH || exit 11
		echo "*** TERMINATED SUCCESSFULLY ***"
		;;

	refbox)
		echo "Running llsf-refbox"
		$LLSF_REFBOX_DIR/bin/llsf-refbox || exit 21
		echo "*** TERMINATED SUCCESSFULLY ***"
		;;

	run-game)
		if [ -z "$TEAM_CYAN" ]; then
			>&2 echo Cyan team color not set, aborting
			exit 31
		fi
		if [ -z "$TEAM_MAGENTA" ]; then
			>&2 echo Magenta team color not set, aborting
			exit 31
		fi
		REFBOX_REMOTE="-r ${REFBOX_HOST:-refbox}:${REFBOX_PORT:-4444}"

		# Setup team names
		echo "Setup team names (cyan: $TEAM_CYAN  magenta: $TEAM_MAGENTA)"
		$LLSF_REFBOX_DIR/bin/rcll-refbox-instruct $REFBOX_REMOTE -w${REFBOX_SETUP_TIMEOUT:-120} -c $TEAM_CYAN -m $TEAM_MAGENTA || exit 32

		if [ -n "$KUBERNETES" ]; then
			echo "Running in Kubernetes, waiting for robot pods (${ROBOTS[*]})"
			# Wait for the expected robot pods
			if [ -n "$ROBOTS" ]; then
				CLAUSE=${ROBOTS// /%2C}
				TRIES=0
				N=0
				declare -a ROBOTS=($ROBOTS)
				while (( $N != ${#ROBOTS[@]} )); do
					# Debug to read in log
					URL="https://kubernetes.default/api/v1/pods?labelSelector=app%3dfawkes,robot+in+%28${CLAUSE}%29"
					echo "*** Getting endpoints ***"
					echo "URL: $URL"
					RESULT=$(curl -s --cacert $KUBERNETES_CACRT --header "Authorization: Bearer $KUBERNETES_TOKEN" "$URL")
					#echo
					#echo "************************************"
					#echo "*** Number of detected endpoints ***"
					N=$(jq -r '.items | map(select(.status.phase=="Running")) | length' <<< "$RESULT")
					echo "N: $N"

					if [ -z "$N" ]; then N=0; fi
					(( TRIES=TRIES+1 ))
					if (( $N != ${#ROBOTS[@]} )); then
						if (( $TRIES >= 60 )); then
							2>&1 echo "Waited for $TRIES tries, aborting"
							exit 33
						fi
						echo "Cannot (yet) reach $r, retrying ($TRIES tries so far)"
						sleep 5
					fi
				done
			fi
		else
			2>&1 echo "WARNING: Not running inside Kubernetes"
			2>&1 echo "         Cannot determine robot pods, just waiting 30 sec"
			sleep 30
		fi

		# Ok, all good, run game
		echo "Starting game"
		$LLSF_REFBOX_DIR/bin/rcll-refbox-instruct $REFBOX_REMOTE -w${REFBOX_COMM_TIMEOUT:-30} -p SETUP -s RUNNING || exit 34

		# Prematurely end SETUP phase and go straight to production (as per sim-comp rules)
		sleep ${PREPARE_TIMEOUT:-92}
		echo "Switching to production phase"
		$LLSF_REFBOX_DIR/bin/rcll-refbox-instruct $REFBOX_REMOTE -w${REFBOX_COMM_TIMEOUT:-30} -p PRODUCTION || exit 35

		# Wait production time, plus overtime, plus some
		echo "Waiting for RCLL game to finish"
		$LLSF_REFBOX_DIR/bin/rcll-refbox-instruct $REFBOX_REMOTE -w${REFBOX_COMM_TIMEOUT:-30} -W${PRODUCTION_TIMEOUT:-1230} -p POST_GAME

		echo "Simulation run completed"
		;;

	fawkes)
		if [ -z "$META_PLUGIN" ]; then
			2>&1 echo "Meta plugin not set, aborting"
			exit 41
		fi
		LL=${LOG_LEVEL:-info}
		CONF=${CONFIG:-config.yaml}
		$FAWKES_DIR/bin/fawkes -c $CONF -L console -l $LL $META_PLUGIN || exit 42
		;;

	roscore)
		roscore || exit 51
		;;

	roslaunch)
		if [ -z "$ROS_PACKAGE" ]; then
			2>&1 echo "ROS package not set, aborting"
			exit 61
		fi
		if [ -z "$ROS_LAUNCH_FILE" ]; then
			2>&1 echo "Launch file not set, aborting"
			exit 61
		fi
		echo "Launching $ROS_PACKAGE $ROS_LAUNCH_FILE"
		roslaunch --screen --wait $ROS_PACKAGE $ROS_LAUNCH_FILE || exit 62
		;;

	*)
		echo "Unknown component"
		exit 1
    ;;
esac

exit 0
